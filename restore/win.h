/*
 * Copyright (c) 2000-2001 Silicon Graphics, Inc.  All Rights Reserved.
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as
 * published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it would be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * Further, this software is distributed without any warranty that it is
 * free of the rightful claim of any third person regarding infringement
 * or the like.  Any license provided herein, whether implied or
 * otherwise, applies only to this software file.  Patent licenses, if
 * any, provided herein do not apply to combinations of this program with
 * other software, or any other product whatsoever.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write the Free Software Foundation, Inc., 59
 * Temple Place - Suite 330, Boston MA 02111-1307, USA.
 * 
 * Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 * Mountain View, CA  94043, or:
 * 
 * http://www.sgi.com 
 * 
 * For further information regarding this notice, see: 
 * 
 * http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/
 */
#ifndef WIN_H
#define WIN_H

/* win.[ch] - windows into a very large file
 */

/* initialize the window abstraction
 */
void win_init( intgen_t fd,
	       off64_t rngoff,		/* offset into file of windowing */
	       size_t winsz,		/* window size */
	       size_t wincntmax );	/* max number of windows to manage */

/* supply a pointer to the portion of the file identified by off.
 */
void win_map( off64_t off,		/* file offset relative to rngoff */
	      void **pp );		/* returns pointer by reference */

/* invalidate the pointer previously supplied. SIDE-EFFECT: zeros
 * by reference the caller's pointer.
 */
void win_unmap( off64_t off,		/* must match win_map param */
	        void **pp );		/* ptr generated by win_map: ZEROED */

/*
 * Functions used to disable the window locking from happening.
 * This is used in the directory reconstruction phase where only
 * one thread is actually executing this code.
 *
 * Assumes called in region where only 1 thread can execute it.
 */
void win_locks_off(void);
void win_locks_on(void);

/*
 * Find out how many mmap calls were made for windows.
 */
size_t win_getnum_mmaps(void);

#endif /* WIN_H */
